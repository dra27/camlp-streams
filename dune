; camlp-streams is built in three different ways, depending on the version of
; OCaml it's built for:
; - 4.13 and earlier: empty library; Standard Library Stream and Genlex used
;   directly, since it's not possible in these versions to override the modules
; - 4.14: Standard Library Stream and Genlex re-exported without deprecation
; - 5.0+: modules in src/ are compiled

; Use the files in src/ for OCaml 5.0+
(rule
  (target stream.mli)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

(rule
  (target stream.ml)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

(rule
  (target genlex.mli)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

(rule
  (target genlex.ml)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

(rule
  (target flags.sexp)
  (action (copy src/%{target} %{target}))
  (enabled_if (>= %{ocaml_version} 5.0)))

; Re-export Stream and Genlex directly in OCaml 4.14 to remove the deprecation
; warning
(rule
  (target stream.mli)
  (action (with-stdout-to %{target}
    (echo "include module type of struct include Stream end")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

(rule
  (target stream.ml)
  (action (with-stdout-to %{target}
    (echo "include Stream")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

(rule
  (target genlex.mli)
  (action (with-stdout-to %{target}
    (echo "include module type of struct include Genlex end")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

(rule
  (target genlex.ml)
  (action (with-stdout-to %{target}
    (echo "include Genlex")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

(rule
  (action (with-stdout-to flags.sexp (echo "(-alert -deprecated)")))
  (enabled_if (and (>= %{ocaml_version} 4.14) (< %{ocaml_version} 5.0))))

; Do nothing for OCaml 4.13 and earlier - Dune will then create an empty library

(rule
  (action (with-stdout-to flags.sexp (echo "()")))
  (enabled_if (< %{ocaml_version} 4.14)))

(library
  (name camlp_streams)
  (public_name camlp-streams)
  (wrapped false)
  (flags :standard (:include flags.sexp)))
